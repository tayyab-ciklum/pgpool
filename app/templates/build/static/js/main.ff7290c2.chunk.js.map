{"version":3,"sources":["components/menu/index.jsx","components/header/sideMenu.jsx","components/header/index.jsx","routes/route-list.js","routes/index.js","components/content/index.jsx","i18n.js","App.js","serviceWorker.js","redux/action-types.js","redux/nodes/nodes.reducer.js","redux/app-reducer.js","config/index.js","config/request.js","config/urls.js","services/nodesService.js","redux/nodes/nodes.action.js","redux/nodes/nodes.saga.js","redux/app-saga.js","redux/app-store.js","index.js","utils/constants.js"],"names":["Sider","Layout","AppMenu","collapsed","toggle","History","useHistory","nodesInfo","collapsible","onCollapse","className","theme","mode","defaultSelectedKeys","Item","key","icon","HomeOutlined","onClick","push","RouteNames","Dashboard","path","length","map","cluster","nodes","node","id","ClusterOutlined","pathname","Nodes","state","menu","target","rel","href","SideMenu","overlay","placement","type","style","float","color","e","preventDefault","DownOutlined","Header","AppHeader","direction","size","UserOutlined","background","lazy","AdminSettings","Node","routeList","component","Clusters","Routes","fallback","exact","render","Content","AppContent","useTranslation","t","i18n","Option","Select","languageDropdown","Object","values","dropDownsData","find","value","langauge","language","changeLanguage","padding","defaultValue","LANGUAGE","marginLeft","use","Backend","initReactI18next","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","App","useState","changeCollapsed","Boolean","window","location","hostname","match","ActionTypes","NODES_ACTIONS","GET_NODES","SET_NODES","REQUEST_ACTIONS","REQUEST_SUCCESS","REQUEST_FAILURE","RESET_REQUEST","INITIAL_STATE","success","failure","NodesReducer","action","payload","AppReducers","combineReducers","nodesReducer","Config","BASE_URL","ENV_CONFIG","process","REACT_APP_API_BASE_URL","client","axios","create","responseType","baseURL","transformResponse","response","defaults","headers","post","Accept","pragma","timeout","request","options","then","data","JSON","parse","err","catch","error","Promise","reject","adminApi","getNodes","url","method","watchGetNodesRequest","put","call","api","result","takeEvery","usersSaga","fork","rootSaga","all","NodesSaga","sagaMiddleware","createSagaMiddleware","middleware","componseEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","AppStore","createStore","applyMiddleware","run","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ff7290c2.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, Menu } from 'antd';\nimport { HomeOutlined, ClusterOutlined} from '@ant-design/icons';\nimport { useHistory } from 'react-router-dom';\nimport { RouteNames } from '../../utils/constants';\nconst { Sider } = Layout;\nconst AppMenu = ({ collapsed, toggle }) => {\n    const History = useHistory();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const nodesInfo = [\n        {\n          \"id\": 1,\n          \"name\": \"updated name\",\n          \"configFile\": \"/usr/local/etc/pgpool.conf\",\n          \"passwordFile\": \"/usr/local/etc/pcp.conf\",\n          \"logFile\": \"/tmp/pgpool.log\",\n          \"pgPoolCommand\": \"/usr/local/bin/pgpool\",\n          \"pcpClientDirectory\": \"/usr/local/bin\",\n          \"pcpHostname\": \"localhost\",\n          \"pcpRefreshTime\": 7,\n          \"clearQueryCache\": true,\n          \"demonMode\": true,\n          \"debugMode\": true,\n          \"shutdownMode\": \"fast\",\n          \"language\": \"en\",\n          \"createdAt\": \"2021-02-15T12:33:44\",\n          \"updatedAt\": \"2021-02-17T09:20:08\",\n          \"nodes\": [\n            {\n              \"id\": 1,\n              \"cluster_id\": 1,\n              \"ip_address\": \"127.0.0.1\",\n              \"port\": 4565,\n              \"status\": \"up\",\n              \"backendSocketDir\": \"/tmp\",\n              \"backendHostname\": \"127.0.0.1\",\n              \"backendPort\": 8080,\n              \"backendWeight\": 5,\n              \"pcpPort\": 443,\n              \"pcpSocketDir\": \"/tmp\",\n              \"pcpTimeout\": 300,\n              \"logDirectory\": \"/default\",\n              \"logConnection\": true,\n              \"printTimeStamp\": true,\n              \"logHostname\": true,\n              \"replicationStrict\": \"default\",\n              \"replicationStopOnMismatch\": false,\n              \"resetQueryList\": \";\",\n              \"healthCheckTimeout\": 200,\n              \"healthCheckPeriod\": 300,\n              \"healthCheckUser\": \"admin\",\n              \"recoveryUser\": \"admin\",\n              \"recoveryPassword\": \"admin\",\n              \"recoveryFirstStageCommand\": \"$PGDATA\",\n              \"recoverySecondStageCommand\": \"$PGDATA_\",\n              \"recoveryTimeout\": 60,\n              \"systemDatabaseHostname\": \"127.0.0.1\",\n              \"systemDatabasePort\": 8080,\n              \"systemDatabaseName\": \"PG\",\n              \"systemDatabaseSchema\": \"DB NAME\",\n              \"systemDatabaseUser\": \"admin\",\n              \"systemDatabasePassword\": \"admin\",\n              \"createdAt\": \"2021-02-18T09:01:31\",\n              \"updatedAt\": \"2021-02-18T09:01:31\"\n            },\n            {\n              \"id\": 2,\n              \"cluster_id\": 1,\n              \"ip_address\": \"127.0.0.1\",\n              \"port\": 4565,\n              \"status\": \"up\",\n              \"backendSocketDir\": \"/tmp\",\n              \"backendHostname\": \"127.0.0.1\",\n              \"backendPort\": 8080,\n              \"backendWeight\": 5,\n              \"pcpPort\": 443,\n              \"pcpSocketDir\": \"/tmp\",\n              \"pcpTimeout\": 300,\n              \"logDirectory\": \"/default\",\n              \"logConnection\": true,\n              \"printTimeStamp\": true,\n              \"logHostname\": true,\n              \"replicationStrict\": \"default\",\n              \"replicationStopOnMismatch\": false,\n              \"resetQueryList\": \";\",\n              \"healthCheckTimeout\": 200,\n              \"healthCheckPeriod\": 300,\n              \"healthCheckUser\": \"admin\",\n              \"recoveryUser\": \"admin\",\n              \"recoveryPassword\": \"admin\",\n              \"recoveryFirstStageCommand\": \"$PGDATA\",\n              \"recoverySecondStageCommand\": \"$PGDATA_\",\n              \"recoveryTimeout\": 60,\n              \"systemDatabaseHostname\": \"127.0.0.1\",\n              \"systemDatabasePort\": 8080,\n              \"systemDatabaseName\": \"PG\",\n              \"systemDatabaseSchema\": \"DB NAME\",\n              \"systemDatabaseUser\": \"admin\",\n              \"systemDatabasePassword\": \"admin\",\n              \"createdAt\": \"2021-02-18T09:11:26\",\n              \"updatedAt\": \"2021-02-18T09:11:26\"\n            }\n          ]\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Cluster 2\",\n          \"configFile\": \"/usr/local/etc/pgpool.conf\",\n          \"passwordFile\": \"/usr/local\",\n          \"logFile\": \"/tmp/pgpool/cbn.log\",\n          \"pgPoolCommand\": \"/usr/local/bin/pgpool\",\n          \"pcpClientDirectory\": \"/usr/local/bin\",\n          \"pcpHostname\": \"localhost2\",\n          \"pcpRefreshTime\": 1,\n          \"clearQueryCache\": false,\n          \"demonMode\": true,\n          \"debugMode\": true,\n          \"shutdownMode\": \"Smart\",\n          \"language\": \"English\",\n          \"createdAt\": \"2021-02-15T13:09:05\",\n          \"updatedAt\": \"2021-02-15T13:09:05\",\n          \"nodes\": [\n            {\n              \"id\": 3,\n              \"cluster_id\": 2,\n              \"ip_address\": \"127.0.0.1\",\n              \"port\": 4565,\n              \"status\": \"up\",\n              \"backendSocketDir\": \"/tmp\",\n              \"backendHostname\": \"127.0.0.1\",\n              \"backendPort\": 8080,\n              \"backendWeight\": 5,\n              \"pcpPort\": 443,\n              \"pcpSocketDir\": \"/tmp\",\n              \"pcpTimeout\": 300,\n              \"logDirectory\": \"/default\",\n              \"logConnection\": true,\n              \"printTimeStamp\": true,\n              \"logHostname\": true,\n              \"replicationStrict\": \"default\",\n              \"replicationStopOnMismatch\": false,\n              \"resetQueryList\": \";\",\n              \"healthCheckTimeout\": 200,\n              \"healthCheckPeriod\": 300,\n              \"healthCheckUser\": \"admin\",\n              \"recoveryUser\": \"admin\",\n              \"recoveryPassword\": \"admin\",\n              \"recoveryFirstStageCommand\": \"$PGDATA\",\n              \"recoverySecondStageCommand\": \"$PGDATA_\",\n              \"recoveryTimeout\": 60,\n              \"systemDatabaseHostname\": \"127.0.0.1\",\n              \"systemDatabasePort\": 8080,\n              \"systemDatabaseName\": \"PG\",\n              \"systemDatabaseSchema\": \"DB NAME\",\n              \"systemDatabaseUser\": \"admin\",\n              \"systemDatabasePassword\": \"admin\",\n              \"createdAt\": \"2021-02-18T09:58:51\",\n              \"updatedAt\": \"2021-02-18T09:58:51\"\n            }\n          ]\n        },\n        {\n          \"id\": 3,\n          \"name\": \"fake cluster \",\n          \"configFile\": \"/user/lib\",\n          \"passwordFile\": \"/log/admin\",\n          \"logFile\": \"/use4r\",\n          \"pgPoolCommand\": \"/user/cmd\",\n          \"pcpClientDirectory\": \"/dir\",\n          \"pcpHostname\": \"localhost\",\n          \"pcpRefreshTime\": 1,\n          \"clearQueryCache\": true,\n          \"demonMode\": false,\n          \"debugMode\": false,\n          \"shutdownMode\": \"Smart\",\n          \"language\": \"English\",\n          \"createdAt\": \"2021-02-16T07:04:49\",\n          \"updatedAt\": \"2021-02-16T07:04:49\",\n          \"nodes\": []\n        },\n        {\n          \"id\": 4,\n          \"name\": \"angularapp\",\n          \"configFile\": \"/user/lib\",\n          \"passwordFile\": \"/log/admin\",\n          \"logFile\": \"/use4r\",\n          \"pgPoolCommand\": \"/user/cmd\",\n          \"pcpClientDirectory\": \"/dir\",\n          \"pcpHostname\": \"localhost\",\n          \"pcpRefreshTime\": 1,\n          \"clearQueryCache\": false,\n          \"demonMode\": false,\n          \"debugMode\": false,\n          \"shutdownMode\": \"Smart\",\n          \"language\": \"English\",\n          \"createdAt\": \"2021-02-16T07:09:48\",\n          \"updatedAt\": \"2021-02-16T07:09:48\",\n          \"nodes\": []\n        },\n        {\n          \"id\": 5,\n          \"name\": \"react app\",\n          \"configFile\": \"/user/lib\",\n          \"passwordFile\": \"/log/admin\",\n          \"logFile\": \"/use4rg\",\n          \"pgPoolCommand\": \"/user/cmd\",\n          \"pcpClientDirectory\": \"/dir\",\n          \"pcpHostname\": \"localhostq\",\n          \"pcpRefreshTime\": 1,\n          \"clearQueryCache\": false,\n          \"demonMode\": false,\n          \"debugMode\": false,\n          \"shutdownMode\": \"Smart\",\n          \"language\": \"English\",\n          \"createdAt\": \"2021-02-17T09:07:37\",\n          \"updatedAt\": \"2021-02-17T09:07:37\",\n          \"nodes\": []\n        }\n      ];\n    return (\n        <Sider collapsible collapsed={collapsed} onCollapse={toggle}>\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                <Menu.Item key=\"1\" icon={<HomeOutlined />} onClick={() => History.push(RouteNames.Dashboard.path)}>\n                    Dashboard\n                </Menu.Item>\n                 {nodesInfo != null && nodesInfo.length > 0 ?\n                nodesInfo.map((cluster) => cluster.nodes.map((node) => {\n                    return (\n                        <Menu.Item key={cluster.id + node.id} icon={<ClusterOutlined />} onClick={() => History.push({\n                            pathname: RouteNames.Nodes.path,\n                            state: cluster\n                        })}>\n                        {\"Node\" + node.id}\n                    </Menu.Item> \n                    )\n                })): null}\n            </Menu>\n        </Sider>\n    );\n};\nexport default AppMenu;","import React from 'react';\nimport { Menu, Dropdown, Button } from 'antd';\nimport { DownOutlined } from \"@ant-design/icons\";\nconst menu = (\n    <Menu>\n      <Menu.Item>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"/\">\n         Logout\n        </a>\n      </Menu.Item>\n    </Menu>\n  );\nconst SideMenu = () => {\n    return (\n    <Dropdown overlay={menu} placement=\"topRight\">\n    <Button type='text' style={{float:\"right\", color: '#ffffff'}} onClick={e => e.preventDefault()}>\n      Postgres Account <DownOutlined />\n    </Button>\n  </Dropdown>\n    );\n};\nexport default SideMenu;\n","import React from 'react';\nimport { Layout,Avatar, Space } from 'antd';\nimport SideMenu from './sideMenu';\nimport { UserOutlined } from \"@ant-design/icons\";\nconst { Header } = Layout;\nconst AppHeader = () => {\n    return (\n        <Header className=\"header\">\n        <Space direction='horizontal' style={{float:'right'}}>\n        <Avatar size={35} icon={<UserOutlined />}  style={{background: \"#fffff\"}}/>\n        <SideMenu/>\n        </Space>\n        </Header>\n    );\n};\nexport default AppHeader;\n","import { lazy } from 'react';\nimport { RouteNames } from '../utils/constants';\nconst Dashboard = lazy(() => import('../views/dashboard'));\nconst AdminSettings = lazy(() => import('../views/setting-groups/admin-settings'));\n// const Clusters = lazy(() => import('../views/clusters'));\nconst Node = lazy(() => import('../views/nodes'));\nconst routeList = {\n    Dashboard: {\n        path: RouteNames.Dashboard.path,\n        component: Dashboard,\n    },\n    AdminSettings: {\n        path: RouteNames.AdminSettings.path,\n        component: AdminSettings\n    },\n    Clusters: {\n        path: RouteNames.Clusters.path,\n        component: AdminSettings\n    },\n    Nodes: {\n        path: RouteNames.Nodes.path,\n        component: Node\n    }\n};\nexport default routeList;\n","import { Switch, Route } from 'react-router-dom';\nimport React, { Suspense } from 'react';\nimport routeList from './route-list';\n\nconst Routes = ()=> {\n    return (\n        <Suspense fallback={''}>\n            <Switch>\n                <Route exact render={() => <routeList.Dashboard.component />} path={routeList.Dashboard.path} />\n                <Route exact render={() => <routeList.AdminSettings.component />} path={routeList.AdminSettings.path} />\n                <Route exact render={() => <routeList.Clusters.component />} path={routeList.Clusters.path} />\n                <Route exact render={() => <routeList.Nodes.component />} path={routeList.Nodes.path} />\n            </Switch>\n        </Suspense>\n    );\n};\nexport default Routes;\n","import React from 'react';\nimport { Select,  Layout } from 'antd';\nimport Routes from '../../routes';\nimport { dropDownsData, LANGUAGE } from '../../utils/constants';\nimport { useTranslation } from 'react-i18next';\nconst { Content } = Layout;\nconst AppContent = ()=> {\n    const { t, i18n } = useTranslation();\n    const { Option } = Select;\n    let languageDropdown = [];\n    const changeLanguage = (language) => {\n        i18n.changeLanguage(language);\n    }\n    const menuItems = Object.values(dropDownsData).find((menu) => menu.key === 'Language')?.value;\n    menuItems.map(langauge => languageDropdown.push(<Option key={langauge} onClick={() => changeLanguage(langauge)}>{t(`${langauge}`)}</Option>));\n    return (\n        <Content\n            className=\"site-layout-background\"\n            style={{\n                padding: 24,\n            }}\n        >\n                 <Select defaultValue={LANGUAGE} style={{float:\"right\", marginLeft:'2px'}}>\n       {languageDropdown}\n      </Select>\n            <Routes />\n        </Content>\n    );\n};\nexport default AppContent;\n","import i18n from 'i18next'\nimport Backend from 'i18next-xhr-backend'\nimport { initReactI18next } from 'react-i18next'\n\ni18n\n  .use(Backend)\n  .use(initReactI18next)\n  .init({\n    lng: 'English',\n    backend: {\n      loadPath: '/assets/i18n/{{ns}}/{{lng}}.json'\n    },\n    fallbackLng: 'English',\n    debug: true,\n    ns: ['translations'],\n    defaultNS: 'translations',\n    keySeparator: false,\n    interpolation: {\n      escapeValue: false,\n      formatSeparator: ','\n    },\n    react: {\n      wait: true\n    }\n  })\n\nexport default i18n","import React, { useState, Suspense } from 'react';\nimport './App.css';\nimport { Layout } from 'antd';\nimport AppMenu from './components/menu';\nimport AppHeader from './components/header';\nimport AppContent from './components/content';\nimport './i18n';\nfunction App() {\n  const [collapsed, changeCollapsed] = useState(false);\n    const toggle = () => {\n        changeCollapsed(!collapsed);\n    };\n  return (\n    <div id=\"content\">\n       <Suspense fallback={null}>\n    <Layout>\n    <AppMenu collapsed={collapsed} toggle={toggle} />\n        <Layout className=\"site-layout\">\n            <AppHeader />\n            <AppContent />\n        </Layout>\n    </Layout>\n    </Suspense>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const ActionTypes = {\n  NODES_ACTIONS: {\n    GET_NODES: \"GET_NODES\",\n    SET_NODES: \"SET_NODES\",\n  },\n  REQUEST_ACTIONS: {\n    REQUEST_SUCCESS: \"REQUEST_SUCCESS\",\n    REQUEST_FAILURE: \"REQUEST_FAILURE\",\n    RESET_REQUEST: \"RESET_REQUEST\"\n  },\n};\n\nexport default ActionTypes;\n","import { ActionTypes } from \"../action-types\";\nconst { NODES_ACTIONS, REQUEST_ACTIONS } = ActionTypes;\n\nconst INITIAL_STATE = {\n  nodes: null,\n  success: false,\n  failure: false\n};\n\nconst { SET_NODES } = NODES_ACTIONS;\nconst { REQUEST_SUCCESS, REQUEST_FAILURE, RESET_REQUEST } = REQUEST_ACTIONS;\nconst NodesReducer = (state = INITIAL_STATE, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_NODES:\n      return {\n        ...state,\n        nodes: payload,\n        success: true\n      };\n    case REQUEST_SUCCESS:\n      return {\n        ...state,\n        success: true\n      };\n    case REQUEST_FAILURE:\n      return {\n        ...state,\n        failure: true\n      };\n    case RESET_REQUEST:\n        return {\n          ...state,\n          success: false,\n          failure: false\n        };\n    default:\n      return state;\n  }\n};\n\nexport default NodesReducer;\n","import { combineReducers } from \"redux\";\nimport NodesReducer from \"./nodes/nodes.reducer\";\n\nconst AppReducers = combineReducers({\n  nodesReducer: NodesReducer,\n});\n\nexport default (state, action) => AppReducers(state, action);\n","const { REACT_APP_API_BASE_URL } = window.ENV_CONFIG || process.env;\nexport const Config = {\n  BASE_URL: REACT_APP_API_BASE_URL\n};\n\nexport default Config;\n","import axios from 'axios';\nimport Config from '.';\n\nconst { BASE_URL } = Config;\nconst client = axios.create({\n    responseType: 'json',\n    baseURL: BASE_URL,\n    transformResponse: (response) => response,\n});\n\nclient.defaults.headers.post['Content-Type'] = 'application/json';\nclient.defaults.headers.post.Accept = 'application/json';\nclient.defaults.headers.pragma = 'no-cache';\nclient.defaults.timeout = 60000;\n\nconst request = (options) => {\n    const onSuccess = (response) => {\n        try {\n            if (typeof response.data === 'string') return JSON.parse(response.data);\n            else return response.data;\n        } catch (err) {\n            return response.data;\n        }\n    };\n\n    const onFailure = (error) => {\n        return Promise.reject(error);\n    };\n\n    return client(options).then(onSuccess).catch(onFailure);\n};\n\nexport default request;\n","import Config from './index';\nconst { BASE_URL } = Config;\n\n\nexport const adminApi = {\n    getNodes: () => `${BASE_URL}/nodes/`,\n};","import request from \"../config/request\";\nimport { adminApi } from \"../config/urls\";\n\nexport const getNodes = () => {\n  return request({\n    url: adminApi.getNodes(),\n    method: \"GET\",\n  })\n    .then((response) => response)\n    .catch((error) => {\n      return Promise.reject(error.response);\n    });\n};","import ActionTypes from \"../action-types\";\nconst {\n    GET_NODES,\n    SET_NODES\n} = ActionTypes.NODES_ACTIONS;\nconst {\nRESET_REQUEST,\nREQUEST_SUCCESS,\nREQUEST_FAILURE\n} = ActionTypes.REQUEST_ACTIONS;\n\nexport const getNodes = () => ({\n    type: GET_NODES\n});\nexport const SetNodes = (nodes) => ({\n    type: SET_NODES,\n    payload: nodes\n});\nexport const ResetRequest = () => ({\n    type: RESET_REQUEST\n});\nexport const RequestSuccess = () => ({\n    type: REQUEST_SUCCESS\n});\nexport const RequestFailure = () => ({\n    type: REQUEST_FAILURE\n});","import {\n    takeEvery,\n    call,\n    fork,\n    put\n  } from \"redux-saga/effects\";\n  \n  import * as api from \"../../services/nodesService\";\n  import * as actions from \"./nodes.action\";\n  import ActionTypes from \"../action-types\";\n  const {\n    GET_NODES\n  } = ActionTypes.NODES_ACTIONS;\n  \n  function* getNodes() {\n    yield put(actions.ResetRequest());\n    try {\n      const result = yield call(api.getNodes);\n      yield put(actions.SetNodes(result));\n    } catch (e) {\n      yield put(actions.RequestFailure());\n    }\n  }\n  \n  function* watchGetNodesRequest() {\n    yield takeEvery(GET_NODES, getNodes);\n  }\n  \n  \n  const usersSaga = [\n    fork(watchGetNodesRequest)\n  ];\n  \n  export default usersSaga;\n  ","import NodesSaga from \"./nodes/nodes.saga\";\nimport { all } from \"redux-saga/effects\";\n\nexport default function* rootSaga() {\n  yield all([\n    ...NodesSaga,\n  ]);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport AppReducers from \"./app-reducer\";\nimport rootSaga from \"./app-saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [];\nmiddleware.push(sagaMiddleware);\n\nconst componseEnhancers =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst AppStore = createStore(\n  AppReducers,\n  componseEnhancers(applyMiddleware(...middleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default AppStore;\n","import \"antd/dist/antd.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport AppStore from './redux/app-store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={AppStore}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      </Provider>\n      </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n","export const RouteNames = {\n    Dashboard: {\n        path: '/',\n    },\n    AdminSettings: {\n        path: '/admin-settings',\n    },\n    Clusters: {\n        path: '/clusters',\n    },\n    Nodes : {\n        path: '/node'\n    }\n};\nexport const dropDownsData = [\n    {\n        key: 'StopMode',\n        value: ['Smart'],\n    },\n    {\n        key: 'Language',\n        value: ['English', 'French'],\n    }\n];\nexport const DATE_FORMAT = 'DD-MMM-YY';\nexport const LANGUAGE = 'English';"],"sourceRoot":""}