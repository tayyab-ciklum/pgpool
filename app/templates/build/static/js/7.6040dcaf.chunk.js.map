{"version":3,"sources":["views/setting-groups/admin-settings/index.jsx","config/nodeSettingsConfig.js","views/node-settings/index.jsx","config/nodesConfig.js","components/tabs/index.jsx","views/nodes/index.jsx"],"names":["layout","labelCol","span","wrapperCol","AdminSettings","Form","useForm","formRef","getOptions","type","res","option","Object","values","dropDownsData","find","menu","key","value","map","Option","colon","initialValues","pcpRefreshTime","shutdownMode","language","debugMode","clearQueryCache","demonMode","form","onFinish","Item","name","rules","required","message","pattern","RegExp","label","valuePropName","style","marginLeft","htmlType","nodeSettingsConfig","Component","Panel","Collapse","NodeSettings","panels","node","push","header","defaultActiveKey","nodesInfo","TabPane","Tabs","NodeTabs","tabs","tab","NodePgPool"],"mappings":"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","file":"static/js/7.6040dcaf.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Input, Button, Row, Col, Space, Switch, Select } from 'antd';\nimport { dropDownsData } from '../../../utils/constants';\nconst layout = {\n    labelCol: {\n        span: 7,\n    },\n    wrapperCol: {\n        span: 14,\n    },\n};\nconst AdminSettings = () => {\n    const [formRef] = Form.useForm();  \n    const getOptions = (type) => {\n        let res = [];\n        const option = Object.values(dropDownsData).find((menu) => menu.key === type)?.value;\n        if (option)\n            res = Object.values(option).map((value) => (\n                <Select.Option key={value} value={value}>\n                    {value}\n                </Select.Option>\n            ));\n        return res;\n    };\n    const handleSubmit = () => {\n    };\n    return (\n        <div>\n            <h3>PG Pool Admin Settings</h3>\n            <Form\n                colon={false}\n                initialValues={{ pcpRefreshTime: 1, shutdownMode: 'Smart', language: 'English', debugMode: false, clearQueryCache: false, demonMode: false  }}\n                {...layout}\n                form={formRef}\n                onFinish={handleSubmit}\n            >\n                <Row>\n                    <Col span={12}>\n                        <Form.Item\n                            name=\"configFile\"\n                            rules={[\n                                {\n                                    required: true,\n                                    type: 'string',\n                                    message: 'Required',\n                                },\n                                {\n                                    pattern: RegExp(/^\\S*$/),\n                                    message: 'Space not allowed',\n                                },\n                            ]}\n                            label=\"PgPool.conf File\"\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"pgPoolCommand\"\n                            rules={[\n                                {\n                                    required: true,\n                                    type: 'string',\n                                    message: 'Required',\n                                },\n                                {\n                                    pattern: RegExp(/^\\S*$/),\n                                    message: 'Space not allowed',\n                                },\n                            ]}\n                            label=\"PgPool Command\"\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"pcpClientDirectory\"\n                            rules={[\n                                {\n                                    required: true,\n                                    type: 'string',\n                                    message: 'Required',\n                                },\n                                {\n                                    pattern: RegExp(/^\\S*$/),\n                                    message: 'Space not allowed',\n                                },\n                            ]}\n                            label=\"PCP Directory\"\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            rules={[\n                                {\n                                    required: false,\n                                    pattern: new RegExp('^[0-9]*$'),\n                                    message: 'Please select a valid number',\n                                },\n                                {\n                                    pattern: RegExp(/^\\S*$/),\n                                    message: 'Space not allowed',\n                                },\n                            ]}\n                            name=\"pcpRefreshTime\"\n                            label=\"Refresh Time\"\n                        >\n                            <Input />\n                        </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            name=\"passwordFile\"\n                            rules={[\n                                {\n                                    required: true,\n                                    type: 'string',\n                                    message: 'Required',\n                                },\n                                {\n                                    pattern: RegExp(/^\\S*$/),\n                                    message: 'Space not allowed',\n                                },\n                            ]}\n                            label=\"PgPool Password File\"\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"logFile\"\n                            rules={[\n                                {\n                                    required: true,\n                                    type: 'string',\n                                    message: 'Required',\n                                },\n                                {\n                                    pattern: RegExp(/^\\S*$/),\n                                    message: 'Space not allowed',\n                                },\n                            ]}\n                            label=\"PgPool Log File\"\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"pcpHostname\"\n                            rules={[\n                                {\n                                    required: true,\n                                    type: 'string',\n                                    message: 'Required',\n                                },\n                                {\n                                    pattern: RegExp(/^\\S*$/),\n                                    message: 'Space not allowed',\n                                },\n                            ]}\n                            label=\"PCP Hostname\"\n                        >\n                            <Input />\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Form.Item\n                    name=\"clearQueryCache\"\n                    label=\"Clears query cache(-c)\"\n                    rules={[\n                        {\n                            type: 'boolean',\n                        },\n                    ]}\n                    valuePropName=\"checked\"\n                >\n                    <Switch />\n                </Form.Item>\n                <Form.Item\n                    name=\"demonMode\"\n                    rules={[\n                        {\n                            type: 'boolean',\n                        },\n                    ]}\n                    label=\"Don't run in demon mode(-n)\"\n                    valuePropName=\"checked\"\n                >\n                    <Switch />\n                </Form.Item>\n                <Form.Item\n                    name=\"debugMode\"\n                    rules={[\n                        {\n                            type: 'boolean',\n                        },\n                    ]}\n                    label=\"Debug mode(-d)\"\n                    valuePropName=\"checked\"\n                >\n                    <Switch />\n                </Form.Item>\n                <Row>\n                    <Col span={12}>\n                        <Form.Item\n                            name=\"shutdownMode\"\n                            label=\"Stop Mode (-m)\"\n                            rules={[\n                                {\n                                    type: 'string',\n                                },\n                            ]}\n                        >\n                            <Select>{getOptions('StopMode')}</Select>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={12}>\n                        <Form.Item\n                            name=\"language\"\n                            label=\"Language\"\n                            rules={[\n                                {\n                                    type: 'string',\n                                },\n                            ]}\n                        >\n                            <Select>{getOptions('Language')}</Select>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Space style={{ marginLeft: '42%' }}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                    <Button>Cancel</Button>\n                </Space>\n            </Form>\n        </div>\n    );\n};\nexport default AdminSettings;\n","import React from \"react\";\nimport AdminSettings from \"../views/setting-groups/admin-settings\";\n\nexport const nodeSettingsConfig = [\n    {\n        key: 1,\n        name:'Settings 1',\n        Component: <AdminSettings />,\n    },\n    {\n        key: 2,\n        name: 'Settings 2',\n        Component: <AdminSettings />,\n    },\n    {\n        key: 3,\n        name:'Settings 3',\n        Component: <AdminSettings />,\n    },\n    {\n        key: 4,\n        name:'Settings 4',\n        Component: <AdminSettings />,\n    },\n];","import React from \"react\";\nimport { Collapse } from 'antd';\nimport { nodeSettingsConfig } from \"../../config/nodeSettingsConfig\";\n\nconst { Panel } = Collapse;\nconst NodeSettings = () => {\n    const panels = [];\n    Object.values(nodeSettingsConfig).map((node) => panels.push(<Panel header={node.name} key={node.key}>{node.Component}</Panel>));\n    return (\n            <Collapse defaultActiveKey={['1']}>\n                {panels}\n            </Collapse>\n    )\n}\nexport default NodeSettings;","import React from \"react\";\nimport NodeSettings from \"../views/node-settings\";\n\nexport const nodesInfo = [\n    {\n        key: 1,\n        name:'Statistics',\n        Component: <NodeSettings />,\n    },\n    {\n        key: 2,\n        name: 'Analytics',\n        Component: <NodeSettings />,\n    },\n];","import React from 'react';\nimport { Tabs } from 'antd';\nimport { nodesInfo } from '../../config/nodesConfig';\nconst { TabPane } = Tabs;\nconst NodeTabs = () => {\n  const tabs = [];\n  Object.values(nodesInfo).map((node) => tabs.push(<TabPane tab={node.name} key={node.key}>{node.Component}</TabPane>));\n  return (\n<Tabs defaultActiveKey=\"1\">\n   {tabs}\n  </Tabs>\n  );\n}\nexport default NodeTabs;\n","import React from \"react\";\nimport NodeTabs from \"../../components/tabs\";\nconst NodePgPool = () => {\n  return (<NodeTabs />);  \n}\nexport default NodePgPool;\n"],"sourceRoot":""}